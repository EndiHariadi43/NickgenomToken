name: Verify on BscScan

on:
  workflow_dispatch:
    inputs:
      network:
        description: "Pilih network"
        type: choice
        required: true
        options: [bsc, bscTestnet]
        default: bsc
      contract:
        description: 'Qualified name, contoh: "contracts/token/NickgenomPermit.sol:NickgenomPermit"'
        required: true
        default: "contracts/token/NickgenomPermit.sol:NickgenomPermit"
        type: string
      args_file:
        description: "Path file JS/TS untuk argumen constructor (opsional)"
        required: false
        type: string

jobs:
  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      
      - run: |
          node -v
          npm -v
          npm config get engine-strict --location=project      

      - name: Install dependencies
        run: |
          npm ci || npm ci --legacy-peer-deps

      - name: Compile contracts
        env:
          BSC_RPC_URL: ${{ secrets.BSC_RPC_URL }}
          BSC_TESTNET_RPC_URL: ${{ secrets.BSC_TESTNET_RPC_URL }}
        run: |
          npx hardhat clean
          npx hardhat compile

      - name: Verify contract on BscScan
        env:
          BSCSCAN_API_KEY: ${{ secrets.BSCSCAN_API_KEY }}
        run: |
          NET="${{ inputs.network }}"
          CONTRACT_QN="${{ inputs.contract }}"

          # Ambil alamat kontrak otomatis dari secrets
          if [ "$NET" = "bsc" ]; then
            ADDR="${{ secrets.CONTRACT_ADDRESS_BSC }}"
          else
            ADDR="${{ secrets.CONTRACT_ADDRESS_BSCTESTNET }}"
          fi

          if [ -z "$ADDR" ]; then
            echo "‚ùå Secret alamat kontrak kosong untuk $NET"
            exit 1
          fi

          echo "üîé Verifying $CONTRACT_QN at $ADDR on $NET ‚Ä¶"

          CMD="npx hardhat verify --network $NET --contract \"$CONTRACT_QN\" $ADDR"
          if [ -n "${{ inputs.args_file }}" ]; then
            CMD="$CMD --constructor-args \"${{ inputs.args_file }}\""
          fi

          echo "‚û°Ô∏è $CMD"
          eval $CMD
